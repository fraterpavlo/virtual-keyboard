{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./src/index.js","webpack://my-webpack-project/./src/assets/modules/classTextarea.js","webpack://my-webpack-project/./src/assets/modules/classKeyboard.js"],"sourcesContent":["import './style.scss';\nimport keysData from './keysData.json';\nimport Keyboard from './assets/modules/classKeyboard';\nimport TextArea from './assets/modules/classTextarea';\n\n// function startCreateArr() {\n//   let input = document.querySelector(\"#kinput\");\n\n//   input.onkeydown = handle;\n\n//   console.log(EngKeysData);\n// }\n\n// function handle (e) {\n//   e.preventDefault();\n//   if (e.repeat) return;\n//   let data = {\n//     code: e.code,\n//     ruShiftKey: e.key,\n//     size: \"s\",\n//     Shift: e.shiftKey,\n//     ctrlKey: e.ctrlKey,\n//     altKey: e.altKey\n//   }\n\n//   RuKeysData.push(data);\n//   console.log(RuKeysData);\n// }\n\n// window.addEventListener(\"DOMContentLoaded\", startCreateArr);\n\nconst lineBreakLayout = [\n  'Backspace',\n  'Backslash',\n  'Enter',\n  'ShiftRight',\n  'ControlRight',\n];\n\nconst textArea = new TextArea('textarea', 5, 50);\n\nconst RssKeyboard = new Keyboard(\n  'keyboard',\n  'textarea',\n  keysData,\n  lineBreakLayout,\n);\n\nconst taskName = document.createElement('h1');\ntaskName.textContent = 'Virtual-keyboard';\n\nconst createdInWindows = document.createElement('p');\ncreatedInWindows.textContent = 'Клавиатура создана в операционной системе Windows';\n\nconst changeLanguageShortCut = document.createElement('p');\nchangeLanguageShortCut.textContent = 'Для переключения языка комбинация: левыe ctrl + alt. Двойной клик оставляет кнопки Shift Alt Ctrl активными';\n\ndocument.body.appendChild(taskName);\ndocument.body.appendChild(createdInWindows);\ndocument.body.appendChild(changeLanguageShortCut);\n","export default class TextArea {\n  rows = null;\n\n  cols = null;\n\n  id = null;\n\n  constructor(textareaId, rows, cols) {\n    this.id = textareaId;\n    this.rows = rows;\n    this.cols = cols;\n\n    const textAreaElement = document.createElement('textarea');\n    textAreaElement.setAttribute('rows', `${rows}`);\n    textAreaElement.setAttribute('cols', `${cols}`);\n    textAreaElement.id = textareaId;\n    textAreaElement.classList.add('textarea');\n\n    textAreaElement.addEventListener('input', () => {\n      this.value = textAreaElement.value;\n    });\n\n    document.body.appendChild(textAreaElement);\n  }\n}\n","export default class Keyboard {\n  elements = {\n    keyboardContainer: null,\n    keysContainer: null,\n    keys: [],\n    specialKeys: [],\n    notSpecialKeys: [],\n    targetTextArea: null,\n  };\n\n  eventHandlers = {\n    onNotSpecialKeyHandler: this.onNotSpecialKeyListener.bind(this),\n    onSpecialKeyHandler: this.onSpecialKeyListener.bind(this),\n    onBackspaceHandler: this.onBackspaceListener.bind(this),\n    onTabHandler: this.onTabListener.bind(this),\n    onCapsLockHandler: this.onCapsLockListener.bind(this),\n    onEnterHandler: this.onEnterListener.bind(this),\n    onShiftHandler: this.onShiftListener.bind(this),\n    onControlHandler: this.onControlListener.bind(this),\n    onMetaLeftHandler: this.onMetaLeftListener.bind(this),\n    onAltHandler: this.onAltListener.bind(this),\n    onMousedownHandler: this.onMousedownListener.bind(this),\n    onKeydownHandler: this.onKeydownListener.bind(this),\n    onKeyupHandler: this.onKeyupListener.bind(this),\n  };\n\n  functions = {\n    setListenerForKey: this.setListenerForKey.bind(this),\n    setTextContentForKey: this.setTextContentForKey.bind(this),\n    getKeyData: this.getKeyData.bind(this),\n    checkShortcut: this.checkShortcut.bind(this),\n    changeLanguage: this.changeLanguage.bind(this),\n    // togglePropertiesOfThis: this.togglePropertiesOfThis.bind(this),\n  };\n\n  properties = {\n    language: localStorage.getItem('language') || 'ru',\n    capsLock: false,\n    shift: false,\n    ctrl: false,\n    alt: false,\n    pressed: new Set(),\n  };\n\n  data = {\n    keysDataArr: [],\n    lineBreakArr: [],\n  };\n\n  constructor(containerId, textareaId, keysData, lineBreakKeyCodes) {\n    this.data.keysDataArr = keysData;\n    this.data.lineBreakArr = lineBreakKeyCodes;\n\n    // Create elements\n    this.elements.keyboardContainer = document.createElement('div');\n    this.elements.keysContainer = document.createElement('div');\n    const createdKeys = this.createKeys(\n      this.data.keysDataArr,\n      this.data.lineBreakArr,\n    );\n\n    // Setup main elements\n    this.elements.keyboardContainer.classList.add('keyboard');\n    this.elements.keyboardContainer.id = containerId;\n    this.elements.keysContainer.classList.add(\n      'keyboard__keys',\n      'keys-container',\n    );\n    this.elements.targetTextArea = document.getElementById(textareaId);\n\n    // Setup properties\n\n    // Add to DOM\n    this.elements.keyboardContainer.appendChild(this.elements.keysContainer);\n    document.body.appendChild(this.elements.keyboardContainer);\n    this.elements.keysContainer.appendChild(createdKeys);\n\n    // Add keys in this\n    this.elements.keys = this.elements.keysContainer.querySelectorAll(\n      '.keys-container_key',\n    );\n    this.elements.specialKeys = this.elements.keysContainer.querySelectorAll('.key_special');\n    this.elements.notSpecialKeys = this.elements.keysContainer.querySelectorAll('.key_not-special');\n\n    // Add physical keyboard event for window\n    document.body.addEventListener(\n      'keydown',\n      this.eventHandlers.onKeydownHandler,\n    );\n    document.body.addEventListener('keyup', this.eventHandlers.onKeyupHandler);\n  }\n\n  createKeys(keysDataArr, lineBreakArr) {\n    const fragment = document.createDocumentFragment();\n\n    keysDataArr.forEach((keyObj) => {\n      const keyElement = document.createElement('button');\n      const insertLineBreak = lineBreakArr.indexOf(keyObj.code) !== -1;\n      const isSpecialKey = keyObj.isSpecial;\n\n      // Add attributes/classes\n      keyElement.setAttribute('data-code', keyObj.code);\n      keyElement.classList.add('keyboard__key', 'key', `key_${keyObj.size}`);\n\n      isSpecialKey\n        ? keyElement.classList.add('key_special')\n        : keyElement.classList.add('key_not-special');\n\n      // Add texContent\n      this.functions.setTextContentForKey(keyElement);\n      // Add Listener\n      this.functions.setListenerForKey(keyElement);\n\n      // Add to DOM\n      fragment.appendChild(keyElement);\n\n      if (insertLineBreak) {\n        const lineBreakElement = document.createElement('div');\n        lineBreakElement.classList.add('line-break-item');\n        fragment.appendChild(lineBreakElement);\n      }\n    });\n\n    return fragment;\n  }\n\n  setTextContentForKey(keyElement) {\n    const keyData = this.functions.getKeyData(keyElement);\n    const lang = this.properties.language;\n    const isCapsLock = this.properties.capsLock;\n    const isShift = this.properties.shift;\n\n    let result = '';\n\n    if (isCapsLock && isShift) {\n      result = keyData[`${lang}ShiftKey`].toLowerCase();\n    } else if (isCapsLock) {\n      result = keyData[`${lang}Key`].toUpperCase();\n    } else if (isShift) {\n      result = keyData[`${lang}ShiftKey`];\n    } else {\n      result = keyData[`${lang}Key`];\n    }\n\n    keyElement.textContent = result;\n  }\n\n  setListenerForKey(keyElement) {\n    const keyData = this.functions.getKeyData(keyElement);\n    if (keyData.isSpecial) {\n      switch (keyData.code) {\n        case 'Backspace':\n        case 'Tab':\n        case 'CapsLock':\n        case 'Enter':\n        case 'MetaLeft':\n          keyElement.addEventListener('click', (e) => this.eventHandlers.onSpecialKeyHandler(e, keyData.code));\n          break;\n\n        case 'ControlLeft':\n        case 'ControlRight':\n        case 'AltLeft':\n        case 'AltRight':\n        case 'ShiftLeft':\n        case 'ShiftRight':\n          keyElement.addEventListener('mousedown', (e) => this.eventHandlers.onSpecialKeyHandler(e, keyData.code));\n          keyElement.addEventListener('dblclick', (e) => this.eventHandlers.onSpecialKeyHandler(e, keyData.code));\n          break;\n      }\n    } else {\n      keyElement.addEventListener(\n        'click',\n        this.eventHandlers.onNotSpecialKeyHandler,\n      );\n    }\n\n    // Default listener for any key\n    keyElement.addEventListener(\n      'mousedown',\n      this.eventHandlers.onMousedownHandler,\n    );\n  }\n\n  getKeyData(keyElement) {\n    const keyCode = keyElement.getAttribute('data-code');\n    if (!keyCode) return null;\n\n    const keyData = this.data.keysDataArr.find(\n      (keyObj) => keyObj.code === keyCode,\n    );\n\n    return keyData;\n  }\n\n  // togglePropertiesOfThis(keyCode) {\n  //   switch (keyCode) {\n  //     case \"CapsLock\":\n  //       this.properties.capsLock = !this.properties.capsLock;\n  //       this.elements.notSpecialKeys.forEach(this.functions.setTextContentForKey);\n  //     break;\n\n  //     case \"ShiftLeft\":\n  //     case \"ShiftRight\":\n  //       this.properties.shift = !this.properties.shift;\n  //       this.elements.notSpecialKeys.forEach(this.functions.setTextContentForKey);\n  //     break;\n\n  //     case \"ControlLeft\":\n  //     case \"ControlRight\":\n  //       this.properties.ctrl = !this.properties.ctrl;\n  //     break;\n\n  //     case \"AltLeft\":\n  //     case \"AltRight\":\n  //       this.properties.alt = !this.properties.alt;\n  //     break;\n  //   }\n  // }\n\n  onBackspaceListener(event) {\n    if (event.type === 'keyup') return;\n    this.elements.targetTextArea.value = this.elements.targetTextArea.value.slice(0, -1);\n  }\n\n  onTabListener(event) {\n    if (event.type === 'keyup') return;\n    this.elements.targetTextArea.value += '\\t';\n  }\n\n  onCapsLockListener(event, keyCode) {\n    if (event.type === 'keyup') return;\n    this.properties.capsLock = !this.properties.capsLock;\n    this.elements.notSpecialKeys.forEach(this.functions.setTextContentForKey);\n\n    const currentKeyInDOM = this.elements.keysContainer.querySelector(\n      `.key[data-code=${keyCode}]`,\n    );\n\n    this.properties.capsLock\n      ? currentKeyInDOM.classList.add('active-lock')\n      : currentKeyInDOM.classList.remove('active-lock');\n  }\n\n  onEnterListener(event) {\n    if (event.type === 'keyup') return;\n    this.elements.targetTextArea.value += '\\n';\n  }\n\n  onShiftListener(event, keyCode) {\n    if (event.repeat) return;\n    const currentKeyInDOM = this.elements.keysContainer.querySelector(\n      `.key[data-code=${keyCode}]`,\n    );\n    const shiftKeys = this.elements.keysContainer.querySelectorAll(\n      '.key[data-code=ShiftLeft], .key[data-code=ShiftRight]',\n    );\n\n    this.properties.shift = !this.properties.shift;\n    this.elements.notSpecialKeys.forEach(this.functions.setTextContentForKey);\n\n    if (event.type === 'mousedown') {\n      currentKeyInDOM.classList.add('active-lock');\n\n      document.body.addEventListener(\n        'mouseup',\n        () => {\n          currentKeyInDOM.classList.remove('active-lock');\n          this.properties.shift = !this.properties.shift;\n          this.elements.notSpecialKeys.forEach(\n            this.functions.setTextContentForKey,\n          );\n        },\n        { once: true },\n      );\n    } else if (event.type === 'dblclick') {\n      if (this.properties.shift) {\n        currentKeyInDOM.classList.add('active-lock');\n        this.functions.checkShortcut(keyCode);\n      } else {\n        shiftKeys.forEach((el) => el.classList.remove('active-lock'));\n        this.properties.pressed.delete(keyCode);\n      }\n    }\n  }\n\n  onControlListener(event, keyCode) {\n    this.properties.ctrl = !this.properties.ctrl;\n\n    const currentKeyInDOM = this.elements.keysContainer.querySelector(\n      `.key[data-code=${keyCode}]`,\n    );\n    const ctrlKeys = this.elements.keysContainer.querySelectorAll(\n      '.key[data-code=ControlLeft], .key[data-code=ControlRight]',\n    );\n\n    if (event.type === 'mousedown') {\n      currentKeyInDOM.classList.add('active-lock');\n\n      document.body.addEventListener(\n        'mouseup',\n        () => {\n          currentKeyInDOM.classList.remove('active-lock');\n          this.properties.ctrl = !this.properties.ctrl;\n        },\n        { once: true },\n      );\n    } else if (event.type === 'dblclick') {\n      if (this.properties.ctrl) {\n        currentKeyInDOM.classList.add('active-lock');\n        this.functions.checkShortcut(keyCode);\n      } else {\n        ctrlKeys.forEach((el) => el.classList.remove('active-lock'));\n        this.properties.pressed.delete(keyCode);\n      }\n    }\n  }\n\n  onMetaLeftListener(event, keyCode) {\n    if (event.type === 'keyup') return;\n    alert('событие на мета кнопку');\n    // const currentKeyInDOM = this.elements.keysContainer.querySelector(`.key[data-code=${keyCode}]`);\n    // currentKeyInDOM.classList.toggle(\"active-lock\");\n  }\n\n  onAltListener(event, keyCode) {\n    this.properties.alt = !this.properties.alt;\n\n    const currentKeyInDOM = this.elements.keysContainer.querySelector(\n      `.key[data-code=${keyCode}]`,\n    );\n    const altKeys = this.elements.keysContainer.querySelectorAll(\n      '.key[data-code=AltLeft], .key[data-code=AltRight]',\n    );\n\n    if (event.type === 'mousedown') {\n      currentKeyInDOM.classList.add('active-lock');\n\n      document.body.addEventListener(\n        'mouseup',\n        () => {\n          currentKeyInDOM.classList.remove('active-lock');\n          this.properties.alt = !this.properties.alt;\n        },\n        { once: true },\n      );\n    } else if (event.type === 'dblclick') {\n      if (this.properties.alt) {\n        currentKeyInDOM.classList.add('active-lock');\n        this.functions.checkShortcut(keyCode);\n      } else {\n        altKeys.forEach((el) => el.classList.remove('active-lock'));\n        this.properties.pressed.delete(keyCode);\n      }\n    }\n  }\n\n  onSpecialKeyListener(event, keyCode) {\n    event.preventDefault();\n\n    switch (keyCode) {\n      case 'Backspace':\n        this.eventHandlers.onBackspaceHandler(event);\n        break;\n      case 'Tab':\n        this.eventHandlers.onTabHandler(event);\n        break;\n      case 'Enter':\n        this.eventHandlers.onEnterHandler(event);\n        break;\n      case 'CapsLock':\n        this.eventHandlers.onCapsLockHandler(event, keyCode);\n        break;\n      case 'MetaLeft':\n        this.eventHandlers.onMetaLeftHandler(event, keyCode);\n        break;\n      case 'ShiftLeft':\n      case 'ShiftRight':\n        this.eventHandlers.onShiftHandler(event, keyCode);\n        break;\n      case 'ControlLeft':\n      case 'ControlRight':\n        this.eventHandlers.onControlHandler(event, keyCode);\n        break;\n      case 'AltLeft':\n      case 'AltRight':\n        this.eventHandlers.onAltHandler(event, keyCode);\n        break;\n    }\n  }\n\n  onNotSpecialKeyListener(event) {\n    event.preventDefault();\n    let currentKeyInDOM;\n\n    switch (event.type) {\n      case 'click':\n        currentKeyInDOM = event.currentTarget;\n        break;\n\n      case 'keydown':\n        const keyCode = event.code;\n        currentKeyInDOM = this.elements.keysContainer.querySelector(\n          `.key[data-code=${keyCode}]`,\n        );\n    }\n\n    this.elements.targetTextArea.value += currentKeyInDOM.textContent;\n  }\n\n  onMousedownListener(event) {\n    const currentTargetEl = event.currentTarget;\n    currentTargetEl.classList.add('active');\n\n    currentTargetEl.addEventListener('mouseover', toggleActive);\n    currentTargetEl.addEventListener('mouseout', toggleActive);\n\n    document.addEventListener(\n      'mouseup',\n      () => {\n        currentTargetEl.classList.remove('active');\n        currentTargetEl.removeEventListener('mouseover', toggleActive);\n        currentTargetEl.removeEventListener('mouseout', toggleActive);\n      },\n      { once: true },\n    );\n\n    function toggleActive(e) {\n      e.currentTarget.classList.toggle('active');\n    }\n  }\n\n  onKeydownListener(event) {\n    const keyCode = event.code;\n    const currentKeyInDOM = this.elements.keysContainer.querySelector(\n      `.key[data-code=${keyCode}]`,\n    );\n    if (!currentKeyInDOM) return;\n\n    this.functions.checkShortcut(keyCode);\n\n    currentKeyInDOM.classList.add('active');\n    const isSpecialKey = currentKeyInDOM.classList.contains('key_special');\n    isSpecialKey\n      ? this.eventHandlers.onSpecialKeyHandler(event, keyCode)\n      : this.eventHandlers.onNotSpecialKeyHandler(event);\n  }\n\n  onKeyupListener(event) {\n    document.body.addEventListener('keyup', this.eventHandlers.onKeyupHandler, {\n      once: true,\n    });\n    const keyCode = event.code;\n    const currentKeyInDOM = this.elements.keysContainer.querySelector(\n      `.key[data-code=${keyCode}]`,\n    );\n    if (!currentKeyInDOM) return;\n\n    currentKeyInDOM.classList.remove('active');\n    this.properties.pressed.delete(keyCode);\n\n    const isSpecialKey = currentKeyInDOM.classList.contains('key_special');\n    if (isSpecialKey) this.eventHandlers.onSpecialKeyHandler(event, keyCode);\n  }\n\n  checkShortcut(keyCode) {\n    this.properties.pressed.add(keyCode);\n    if (this.properties.pressed.size !== 2) return;\n\n    const isChangeLanguageShortCut = this.properties.pressed.has('AltLeft')\n      && this.properties.pressed.has('ControlLeft');\n\n    if (isChangeLanguageShortCut) this.functions.changeLanguage();\n  }\n\n  changeLanguage() {\n    this.properties.language === 'ru'\n      ? (this.properties.language = 'eng')\n      : (this.properties.language = 'ru');\n\n    this.elements.notSpecialKeys.forEach(this.functions.setTextContentForKey);\n\n    localStorage.setItem('language', this.properties.language);\n  }\n}\n"],"names":["rows","cols","id","constructor","textareaId","this","textAreaElement","document","createElement","setAttribute","classList","add","addEventListener","value","body","appendChild","elements","keyboardContainer","keysContainer","keys","specialKeys","notSpecialKeys","targetTextArea","eventHandlers","onNotSpecialKeyHandler","onNotSpecialKeyListener","bind","onSpecialKeyHandler","onSpecialKeyListener","onBackspaceHandler","onBackspaceListener","onTabHandler","onTabListener","onCapsLockHandler","onCapsLockListener","onEnterHandler","onEnterListener","onShiftHandler","onShiftListener","onControlHandler","onControlListener","onMetaLeftHandler","onMetaLeftListener","onAltHandler","onAltListener","onMousedownHandler","onMousedownListener","onKeydownHandler","onKeydownListener","onKeyupHandler","onKeyupListener","functions","setListenerForKey","setTextContentForKey","getKeyData","checkShortcut","changeLanguage","properties","language","localStorage","getItem","capsLock","shift","ctrl","alt","pressed","Set","data","keysDataArr","lineBreakArr","containerId","keysData","lineBreakKeyCodes","createdKeys","createKeys","getElementById","querySelectorAll","fragment","createDocumentFragment","forEach","keyObj","keyElement","insertLineBreak","indexOf","code","isSpecialKey","isSpecial","size","lineBreakElement","keyData","lang","isCapsLock","isShift","result","toLowerCase","toUpperCase","textContent","e","keyCode","getAttribute","find","event","type","slice","currentKeyInDOM","querySelector","remove","repeat","shiftKeys","once","el","delete","ctrlKeys","alert","altKeys","preventDefault","currentTarget","currentTargetEl","toggleActive","toggle","removeEventListener","contains","has","setItem","taskName","createdInWindows","changeLanguageShortCut"],"sourceRoot":""}