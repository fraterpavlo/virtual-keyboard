{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./src/index.js"],"sourcesContent":["import \"./style.scss\";\r\nimport keysData from \"./keysData.json\";\r\n\r\n// function startCreateArr() {\r\n//   let input = document.querySelector(\"#kinput\");\r\n  \r\n//   input.onkeydown = handle;\r\n\r\n//   console.log(EngKeysData);\r\n// }\r\n\r\n// function handle (e) {\r\n//   e.preventDefault();\r\n//   if (e.repeat) return;\r\n//   let data = {\r\n//     code: e.code,\r\n//     ruShiftKey: e.key,\r\n//     size: \"s\",\r\n//     Shift: e.shiftKey,\r\n//     ctrlKey: e.ctrlKey,\r\n//     altKey: e.altKey\r\n//   }\r\n\r\n//   RuKeysData.push(data);\r\n//   console.log(RuKeysData);\r\n// }\r\n\r\n// window.addEventListener(\"DOMContentLoaded\", startCreateArr);\r\n\r\n\r\nconst lineBreakLayout = [\"Backspace\", \"Backslash\", \"Enter\", \"ShiftRight\", \"ControlRight\"];\r\n\r\nclass Keyboard {\r\n\r\n  elements = {\r\n    keyboardContainer: null,\r\n    keysContainer: null,\r\n    keys: [],\r\n    specialKeys: [],\r\n    notSpecialKeys: [],\r\n    targetTextArea: null,\r\n  };\r\n\r\n    eventHandlers = {\r\n      onNotSpecialKeyHandler: this.onNotSpecialKeyListener.bind(this),\r\n      onSpecialKeyHandler: this.onSpecialKeyListener.bind(this),\r\n      onBackspaceHandler: this.onBackspaceListener.bind(this),\r\n      onTabHandler: this.onTabListener.bind(this),\r\n      onCapsLockHandler: this.onCapsLockListener.bind(this),\r\n      onEnterHandler: this.onEnterListener.bind(this),\r\n      onShiftHandler: this.onShiftListener.bind(this),\r\n      onControlHandler: this.onControlListener.bind(this),\r\n      onMetaLeftHandler: this.onMetaLeftListener.bind(this),\r\n      onAltHandler: this.onAltListener.bind(this),\r\n      onMousedownHandler: this.onMousedownListener.bind(this),\r\n      onKeydownHandler: this.onKeydownListener.bind(this),\r\n      onKeyupHandler: this.onKeyupListener.bind(this),\r\n\r\n    };\r\n\r\n    functions = {\r\n      setListenerForKey: this.setListenerForKey.bind(this),\r\n      setTextContentForKey: this.setTextContentForKey.bind(this),\r\n      getKeyData: this.getKeyData.bind(this),\r\n      checkShortcut: this.checkShortcut.bind(this),\r\n      changeLanguage: this.changeLanguage.bind(this),\r\n      // togglePropertiesOfThis: this.togglePropertiesOfThis.bind(this),\r\n    }\r\n\r\n    properties = {\r\n        language: localStorage.getItem(\"language\") || \"ru\",\r\n        capsLock: false,\r\n        shift: false,\r\n        ctrl: false,\r\n        alt: false,\r\n        pressed: new Set()\r\n    };\r\n\r\n    data = {\r\n      keysDataArr: [],\r\n      lineBreakArr: [],\r\n    }\r\n\r\n\r\n\r\n  constructor (containerId, textareaId, keysData, lineBreakKeyCodes) {\r\n    this.data.keysDataArr = keysData;\r\n    this.data.lineBreakArr = lineBreakKeyCodes;\r\n\r\n    //Create elements\r\n    this.elements.keyboardContainer = document.createElement(\"div\"); \r\n    this.elements.keysContainer = document.createElement(\"div\"); \r\n    const createdKeys = this.createKeys(this.data.keysDataArr, this.data.lineBreakArr);\r\n\r\n    // Setup main elements\r\n    this.elements.keyboardContainer.classList.add(\"keyboard\");\r\n    this.elements.keyboardContainer.id = containerId;\r\n    this.elements.keysContainer.classList.add(\"keyboard__keys\", \"keys-container\");\r\n    this.elements.targetTextArea = document.getElementById(textareaId);\r\n\r\n    // Setup properties\r\n\r\n\r\n    // Add to DOM\r\n    this.elements.keyboardContainer.appendChild(this.elements.keysContainer);\r\n    document.body.appendChild(this.elements.keyboardContainer);\r\n    this.elements.keysContainer.appendChild(createdKeys);\r\n\r\n    //Add keys in this\r\n    this.elements.keys = this.elements.keysContainer.querySelectorAll(\".keys-container_key\");\r\n    this.elements.specialKeys = this.elements.keysContainer.querySelectorAll(\".key_special\");\r\n    this.elements.notSpecialKeys = this.elements.keysContainer.querySelectorAll(\".key_not-special\");\r\n\r\n    //Add physical keyboard event for window\r\n    document.body.addEventListener(\"keydown\", this.eventHandlers.onKeydownHandler);\r\n    document.body.addEventListener(\"keyup\", this.eventHandlers.onKeyupHandler);\r\n\r\n  }\r\n\r\n  createKeys (keysDataArr, lineBreakArr) {\r\n    const fragment = document.createDocumentFragment();\r\n\r\n    keysDataArr.forEach(keyObj => {\r\n      const keyElement = document.createElement(\"button\");\r\n      const insertLineBreak = lineBreakArr.indexOf(keyObj.code) !== -1;\r\n      const isSpecialKey = keyObj.isSpecial;\r\n      \r\n      // Add attributes/classes\r\n      keyElement.setAttribute(\"data-code\", keyObj.code);\r\n      keyElement.classList.add(\"keyboard__key\", \"key\", `key_${keyObj.size}`);\r\n\r\n      isSpecialKey\r\n        ? keyElement.classList.add(\"key_special\")\r\n        : keyElement.classList.add(\"key_not-special\")\r\n      \r\n      // Add texContent \r\n      this.functions.setTextContentForKey(keyElement);\r\n      // Add Listener \r\n      this.functions.setListenerForKey(keyElement);\r\n\r\n      //Add to DOM\r\n      fragment.appendChild(keyElement);\r\n\r\n      if (insertLineBreak) {\r\n          const lineBreakElement = document.createElement(\"div\");\r\n          lineBreakElement.classList.add(\"line-break-item\");\r\n          fragment.appendChild(lineBreakElement);\r\n      }\r\n    });\r\n\r\n    return fragment;\r\n  }\r\n\r\n  setTextContentForKey (keyElement) {\r\n    const keyData = this.functions.getKeyData(keyElement);\r\n    const lang = this.properties.language;\r\n    const isCapsLock = this.properties.capsLock;\r\n    const isShift = this.properties.shift;\r\n\r\n    let result = \"\";\r\n\r\n    if (isCapsLock && isShift) {\r\n      result = keyData[lang + \"ShiftKey\"].toLowerCase();\r\n    } else if (isCapsLock) {\r\n      result = keyData[lang + \"Key\"].toUpperCase();\r\n    } else if (isShift) {\r\n      result = keyData[lang + \"ShiftKey\"];\r\n    } else {\r\n      result = keyData[lang + \"Key\"];\r\n    }\r\n\r\n    keyElement.textContent = result;\r\n  }\r\n\r\n  setListenerForKey (keyElement) { \r\n    const keyData = this.functions.getKeyData(keyElement);\r\n    if (keyData.isSpecial) {\r\n      switch(keyData.code) {\r\n\r\n        case \"Backspace\":\r\n        case \"Tab\":\r\n        case \"CapsLock\":\r\n        case \"Enter\":\r\n        case \"MetaLeft\":\r\n          keyElement.addEventListener(\"click\", (e) => {\r\n            return this.eventHandlers.onSpecialKeyHandler(e, keyData.code)\r\n          });\r\n        break;\r\n        \r\n        case \"ControlLeft\":\r\n        case \"ControlRight\":\r\n        case \"AltLeft\":\r\n        case \"AltRight\":\r\n        case \"ShiftLeft\":\r\n        case \"ShiftRight\":\r\n          keyElement.addEventListener(\"mousedown\", (e) => {\r\n            return this.eventHandlers.onSpecialKeyHandler(e, keyData.code)\r\n          });\r\n          keyElement.addEventListener(\"dblclick\", (e) => {\r\n            return this.eventHandlers.onSpecialKeyHandler(e, keyData.code)\r\n          });\r\n        break;\r\n      }\r\n    } else {\r\n      keyElement.addEventListener(\"click\", this.eventHandlers.onNotSpecialKeyHandler);\r\n    }\r\n\r\n    // Default listener for any key\r\n    keyElement.addEventListener(\"mousedown\", this.eventHandlers.onMousedownHandler);\r\n  }\r\n\r\n  getKeyData (keyElement) {\r\n    const keyCode = keyElement.getAttribute(\"data-code\");\r\n    if (!keyCode) return null;\r\n\r\n    const keyData = this.data.keysDataArr.find(keyObj => keyObj.code === keyCode);\r\n\r\n    return keyData;\r\n  }\r\n\r\n  // togglePropertiesOfThis(keyCode) {\r\n  //   switch (keyCode) {\r\n  //     case \"CapsLock\": \r\n  //       this.properties.capsLock = !this.properties.capsLock;\r\n  //       this.elements.notSpecialKeys.forEach(this.functions.setTextContentForKey);\r\n  //     break;\r\n\r\n  //     case \"ShiftLeft\":\r\n  //     case \"ShiftRight\":\r\n  //       this.properties.shift = !this.properties.shift;\r\n  //       this.elements.notSpecialKeys.forEach(this.functions.setTextContentForKey);\r\n  //     break;\r\n\r\n  //     case \"ControlLeft\":\r\n  //     case \"ControlRight\":\r\n  //       this.properties.ctrl = !this.properties.ctrl;\r\n  //     break;\r\n\r\n  //     case \"AltLeft\":\r\n  //     case \"AltRight\":\r\n  //       this.properties.alt = !this.properties.alt;\r\n  //     break;\r\n  //   }\r\n  // }\r\n\r\n  onBackspaceListener(event) {\r\n    if (event.type === \"keyup\") return;\r\n    this.elements.targetTextArea.value = this.elements.targetTextArea.value.slice(0, -1);\r\n  }\r\n\r\n  onTabListener (event) {\r\n    if (event.type === \"keyup\") return;\r\n    this.elements.targetTextArea.value += \"\\t\";\r\n  }\r\n\r\n  onCapsLockListener (event, keyCode) {\r\n    if (event.type === \"keyup\") return;\r\n    this.properties.capsLock = !this.properties.capsLock;\r\n    this.elements.notSpecialKeys.forEach(this.functions.setTextContentForKey);\r\n\r\n    const currentKeyInDOM = this.elements.keysContainer.querySelector(`.key[data-code=${keyCode}]`)\r\n\r\n    this.properties.capsLock \r\n      ? currentKeyInDOM.classList.add(\"active-lock\") \r\n      : currentKeyInDOM.classList.remove(\"active-lock\");\r\n  }\r\n\r\n  onEnterListener (event) {\r\n    if (event.type === \"keyup\") return;\r\n    this.elements.targetTextArea.value += \"\\n\";\r\n  }\r\n\r\n  onShiftListener (event, keyCode) {\r\n    if (event.repeat) return;\r\n    const currentKeyInDOM = this.elements.keysContainer.querySelector(`.key[data-code=${keyCode}]`);\r\n    const shiftKeys = this.elements.keysContainer.querySelectorAll(\".key[data-code=ShiftLeft], .key[data-code=ShiftRight]\");\r\n\r\n    this.properties.shift = !this.properties.shift;\r\n    this.elements.notSpecialKeys.forEach(this.functions.setTextContentForKey);\r\n    \r\n\r\n    if (event.type === \"mousedown\") {\r\n      currentKeyInDOM.classList.add(\"active-lock\");\r\n      \r\n      document.body.addEventListener(\"mouseup\", () => {\r\n        currentKeyInDOM.classList.remove(\"active-lock\");\r\n        this.properties.shift = !this.properties.shift;\r\n        this.elements.notSpecialKeys.forEach(this.functions.setTextContentForKey);\r\n      }, {once: true});\r\n\r\n    } else if (event.type === \"dblclick\") {\r\n      if (this.properties.shift) {\r\n        currentKeyInDOM.classList.add(\"active-lock\");\r\n        this.functions.checkShortcut(keyCode);\r\n      } else {\r\n        shiftKeys.forEach(el => el.classList.remove(\"active-lock\"));\r\n        this.properties.pressed.delete(keyCode);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  onControlListener (event, keyCode) {\r\n    this.properties.ctrl = !this.properties.ctrl;\r\n\r\n    const currentKeyInDOM = this.elements.keysContainer.querySelector(`.key[data-code=${keyCode}]`);\r\n    const ctrlKeys = this.elements.keysContainer.querySelectorAll(\".key[data-code=ControlLeft], .key[data-code=ControlRight]\");\r\n\r\n    if (event.type === \"mousedown\") {\r\n      currentKeyInDOM.classList.add(\"active-lock\");\r\n      \r\n      document.body.addEventListener(\"mouseup\", () => {\r\n        currentKeyInDOM.classList.remove(\"active-lock\");\r\n        this.properties.ctrl = !this.properties.ctrl;\r\n      }, {once: true});\r\n\r\n    } else if (event.type === \"dblclick\") {\r\n      if (this.properties.ctrl) {\r\n        currentKeyInDOM.classList.add(\"active-lock\");\r\n        this.functions.checkShortcut(keyCode);\r\n      } else {\r\n        ctrlKeys.forEach(el => el.classList.remove(\"active-lock\"));\r\n        this.properties.pressed.delete(keyCode);\r\n      }\r\n    }\r\n  }\r\n\r\n  onMetaLeftListener (event, keyCode) {\r\n    if (event.type === \"keyup\") return;\r\n    console.log(\"meta event\");\r\n    // const currentKeyInDOM = this.elements.keysContainer.querySelector(`.key[data-code=${keyCode}]`);\r\n    // currentKeyInDOM.classList.toggle(\"active-lock\");\r\n  }\r\n\r\n  onAltListener (event, keyCode) {\r\n    this.properties.alt = !this.properties.alt;\r\n\r\n    const currentKeyInDOM = this.elements.keysContainer.querySelector(`.key[data-code=${keyCode}]`);\r\n    const altKeys = this.elements.keysContainer.querySelectorAll(\".key[data-code=AltLeft], .key[data-code=AltRight]\");\r\n\r\n    if (event.type === \"mousedown\") {\r\n      currentKeyInDOM.classList.add(\"active-lock\");\r\n      \r\n      document.body.addEventListener(\"mouseup\", () => {\r\n        currentKeyInDOM.classList.remove(\"active-lock\");\r\n        this.properties.alt = !this.properties.alt;\r\n      }, {once: true});\r\n\r\n    } else if (event.type === \"dblclick\") {\r\n      if (this.properties.alt) {\r\n        currentKeyInDOM.classList.add(\"active-lock\");\r\n        this.functions.checkShortcut(keyCode);\r\n      } else {\r\n        altKeys.forEach(el => el.classList.remove(\"active-lock\"));\r\n        this.properties.pressed.delete(keyCode);\r\n      }\r\n    }\r\n  }\r\n\r\n  onSpecialKeyListener(event, keyCode) {\r\n    event.preventDefault()\r\n\r\n    switch (keyCode) {\r\n      case \"Backspace\":\r\n        this.eventHandlers.onBackspaceHandler(event);\r\n      break;\r\n      case \"Tab\":\r\n        this.eventHandlers.onTabHandler(event);\r\n      break;\r\n      case \"Enter\":\r\n        this.eventHandlers.onEnterHandler(event);\r\n      break;\r\n      case \"CapsLock\":\r\n        this.eventHandlers.onCapsLockHandler(event, keyCode);\r\n      break;\r\n      case \"MetaLeft\":\r\n        this.eventHandlers.onMetaLeftHandler(event, keyCode);\r\n      break;\r\n      case \"ShiftLeft\":\r\n      case \"ShiftRight\": \r\n        this.eventHandlers.onShiftHandler(event, keyCode);\r\n      break;\r\n      case \"ControlLeft\":\r\n      case \"ControlRight\":\r\n        this.eventHandlers.onControlHandler(event, keyCode);\r\n      break;\r\n      case \"AltLeft\":\r\n      case \"AltRight\":\r\n        this.eventHandlers.onAltHandler(event, keyCode);\r\n      break;\r\n    }\r\n  }\r\n\r\n  onNotSpecialKeyListener (event) {\r\n    event.preventDefault();\r\n    let currentKeyInDOM;\r\n\r\n    switch (event.type) {\r\n\r\n      case \"click\":\r\n        currentKeyInDOM = event.currentTarget;\r\n      break;\r\n\r\n      case \"keydown\":\r\n        const keyCode = event.code;\r\n        currentKeyInDOM = this.elements.keysContainer.querySelector(`.key[data-code=${keyCode}]`);\r\n    }\r\n\r\n    this.elements.targetTextArea.value += currentKeyInDOM.textContent;\r\n  }\r\n\r\n  onMousedownListener(event) {\r\n    const currentTargetEl = event.currentTarget;\r\n    currentTargetEl.classList.add(\"active\");\r\n\r\n    currentTargetEl.addEventListener(\"mouseover\", toggleActive);\r\n    currentTargetEl.addEventListener(\"mouseout\", toggleActive);\r\n\r\n    document.addEventListener(\"mouseup\", () => {\r\n      currentTargetEl.classList.remove(\"active\");\r\n      currentTargetEl.removeEventListener(\"mouseover\", toggleActive);\r\n      currentTargetEl.removeEventListener(\"mouseout\", toggleActive);\r\n    }, {once: true});\r\n\r\n    function toggleActive (e) {\r\n      e.currentTarget.classList.toggle(\"active\");\r\n    }\r\n  }\r\n\r\n  onKeydownListener (event) {\r\n    const keyCode = event.code;\r\n    const currentKeyInDOM = this.elements.keysContainer.querySelector(`.key[data-code=${keyCode}]`);\r\n    if (!currentKeyInDOM) return;\r\n\r\n    this.functions.checkShortcut(keyCode);\r\n\r\n    currentKeyInDOM.classList.add(\"active\");\r\n    const isSpecialKey = currentKeyInDOM.classList.contains(\"key_special\");\r\n    isSpecialKey \r\n      ? this.eventHandlers.onSpecialKeyHandler(event, keyCode)\r\n      : this.eventHandlers.onNotSpecialKeyHandler(event);\r\n  }\r\n\r\n  onKeyupListener (event) {\r\n    document.body.addEventListener(\"keyup\", this.eventHandlers.onKeyupHandler, {once: true});\r\n    const keyCode = event.code;\r\n    const currentKeyInDOM = this.elements.keysContainer.querySelector(`.key[data-code=${keyCode}]`);\r\n    if (!currentKeyInDOM) return;\r\n\r\n    currentKeyInDOM.classList.remove(\"active\");\r\n    this.properties.pressed.delete(keyCode);\r\n\r\n    const isSpecialKey = currentKeyInDOM.classList.contains(\"key_special\");\r\n    if (isSpecialKey) this.eventHandlers.onSpecialKeyHandler(event, keyCode);\r\n  }\r\n\r\n  checkShortcut(keyCode) {\r\n    this.properties.pressed.add(keyCode);\r\n    if (this.properties.pressed.size !== 2) return;\r\n\r\n    const isChangeLanguageShortCut = this.properties.pressed.has(\"AltLeft\") &&  this.properties.pressed.has(\"ControlLeft\");\r\n\r\n    if (isChangeLanguageShortCut) this.functions.changeLanguage();\r\n\r\n    return;\r\n  }\r\n\r\n  changeLanguage () {\r\n    this.properties.language === \"ru\" \r\n      ? this.properties.language = \"eng\"\r\n      : this.properties.language = \"ru\";\r\n\r\n    this.elements.notSpecialKeys.forEach(this.functions.setTextContentForKey);\r\n\r\n    localStorage.setItem(\"language\", this.properties.language);\r\n  }\r\n\r\n}\r\n\r\nclass TextArea {\r\n\r\n  rows = null;\r\n  cols = null;\r\n  id = null;\r\n\r\n\r\n  constructor (textareaId, rows, cols) {\r\n    this.id = textareaId;\r\n    this.rows = rows;\r\n    this.cols = cols;\r\n\r\n    const textAreaElement = document.createElement(\"textarea\");\r\n    textAreaElement.setAttribute(\"rows\", `${rows}`);\r\n    textAreaElement.setAttribute(\"cols\", `${cols}`);\r\n    textAreaElement.id = textareaId;\r\n    textAreaElement.classList.add(\"textarea\");\r\n\r\n    textAreaElement.addEventListener(\"input\", () => {\r\n      this.value = textAreaElement.value;\r\n    })\r\n\r\n    document.body.appendChild(textAreaElement);\r\n  }\r\n\r\n}\r\n\r\nconst textArea = new TextArea(\"textarea\", 5, 50);\r\n\r\nconst RssKeyboard = new Keyboard(\"keyboard\", \"textarea\", keysData, lineBreakLayout);\r\n\r\n\r\nconst taskName = document.createElement(\"h1\");\r\ntaskName.textContent = \"Virtual-keyboard\";\r\n\r\nconst createdInWindows = document.createElement(\"p\");\r\ncreatedInWindows.textContent = \"Клавиатура создана в операционной системе Windows\";\r\n\r\nconst changeLanguageShortCut = document.createElement(\"p\");\r\nchangeLanguageShortCut.textContent = \"Для переключения языка комбинация: левыe ctrl + alt. Двойной клик оставляет кнопки Shift Alt Ctrl активными\";\r\n\r\ndocument.body.appendChild(taskName);\r\ndocument.body.appendChild(createdInWindows);\r\ndocument.body.appendChild(changeLanguageShortCut);"],"names":["rows","cols","id","constructor","textareaId","this","textAreaElement","document","createElement","setAttribute","classList","add","addEventListener","value","body","appendChild","elements","keyboardContainer","keysContainer","keys","specialKeys","notSpecialKeys","targetTextArea","eventHandlers","onNotSpecialKeyHandler","onNotSpecialKeyListener","bind","onSpecialKeyHandler","onSpecialKeyListener","onBackspaceHandler","onBackspaceListener","onTabHandler","onTabListener","onCapsLockHandler","onCapsLockListener","onEnterHandler","onEnterListener","onShiftHandler","onShiftListener","onControlHandler","onControlListener","onMetaLeftHandler","onMetaLeftListener","onAltHandler","onAltListener","onMousedownHandler","onMousedownListener","onKeydownHandler","onKeydownListener","onKeyupHandler","onKeyupListener","functions","setListenerForKey","setTextContentForKey","getKeyData","checkShortcut","changeLanguage","properties","language","localStorage","getItem","capsLock","shift","ctrl","alt","pressed","Set","data","keysDataArr","lineBreakArr","containerId","keysData","lineBreakKeyCodes","createdKeys","createKeys","getElementById","querySelectorAll","fragment","createDocumentFragment","forEach","keyObj","keyElement","insertLineBreak","indexOf","code","isSpecialKey","isSpecial","size","lineBreakElement","keyData","lang","isCapsLock","isShift","result","toLowerCase","toUpperCase","textContent","e","keyCode","getAttribute","find","event","type","slice","currentKeyInDOM","querySelector","remove","repeat","shiftKeys","once","el","delete","ctrlKeys","console","log","altKeys","preventDefault","currentTarget","currentTargetEl","toggleActive","toggle","removeEventListener","contains","has","setItem","taskName","createdInWindows","changeLanguageShortCut"],"sourceRoot":""}