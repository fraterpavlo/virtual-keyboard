{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./src/index.js"],"sourcesContent":["import \"./style.scss\";\r\nimport keysData from \"./keysData.json\";\r\n\r\n// function startCreateArr() {\r\n//   let input = document.querySelector(\"#kinput\");\r\n  \r\n//   input.onkeydown = handle;\r\n\r\n//   console.log(EngKeysData);\r\n// }\r\n\r\n// function handle (e) {\r\n//   e.preventDefault();\r\n//   if (e.repeat) return;\r\n//   let data = {\r\n//     code: e.code,\r\n//     ruShiftKey: e.key,\r\n//     size: \"s\",\r\n//     Shift: e.shiftKey,\r\n//     ctrlKey: e.ctrlKey,\r\n//     altKey: e.altKey\r\n//   }\r\n\r\n//   RuKeysData.push(data);\r\n//   console.log(RuKeysData);\r\n// }\r\n\r\n// window.addEventListener(\"DOMContentLoaded\", startCreateArr);\r\n\r\n\r\nconst lineBreakLayout = [\"Backspace\", \"Backslash\", \"Enter\", \"ShiftRight\", \"ControlRight\"];\r\n\r\nclass Keyboard {\r\n\r\n  elements = {\r\n    keyboardContainer: null,\r\n    keysContainer: null,\r\n    keys: [],\r\n    specialKeys: [],\r\n    notSpecialKeys: [],\r\n    targetTextArea: null,\r\n  };\r\n\r\n    eventHandlers = {\r\n      onBackspaceHandler: this.onBackspaceListener.bind(this),\r\n      onTabHandler: this.onTabListener.bind(this),\r\n      onCapsLockHandler: this.onCapsLockListener.bind(this),\r\n      onEnterHandler: this.onEnterListener.bind(this),\r\n      onShiftHandler: this.onShiftListener.bind(this),\r\n      onControlHandler: this.onControlListener.bind(this),\r\n      onMetaLeftHandler: this.onMetaLeftListener.bind(this),\r\n      onAltHandler: this.onAltListener.bind(this),\r\n      onClickTextInputHandler: this.onClickTextInputListener.bind(this),\r\n      onMousedownHandler: this.onMousedownListener.bind(this),\r\n      // onHandler: this.onListener.bind(this),\r\n\r\n    };\r\n\r\n    functions = {\r\n      setTextContentForKey: this.setTextContentForKey.bind(this),\r\n    }\r\n\r\n    properties = {\r\n        // textAreaValue: \"\",\r\n        language: \"ru\",\r\n        capsLock: false,\r\n        shift: false,\r\n        ctrl: false,\r\n        alt: false,\r\n    };\r\n\r\n    data = {\r\n      keysDataArr: [],\r\n      lineBreakArr: [],\r\n    }\r\n\r\n\r\n\r\n  constructor (containerId, textareaId, keysData, lineBreakKeyCodes) {\r\n    this.data.keysDataArr = keysData;\r\n    this.data.lineBreakArr = lineBreakKeyCodes;\r\n\r\n    //Create elements\r\n    this.elements.keyboardContainer = document.createElement(\"div\"); \r\n    this.elements.keysContainer = document.createElement(\"div\"); \r\n    const createdKeys = this.createKeys(this.data.keysDataArr, this.data.lineBreakArr);\r\n\r\n    // Setup main elements\r\n    this.elements.keyboardContainer.classList.add(\"keyboard\");\r\n    this.elements.keyboardContainer.id = containerId;\r\n    this.elements.keysContainer.classList.add(\"keyboard__keys\", \"keys-container\");\r\n    this.elements.targetTextArea = document.getElementById(textareaId);\r\n\r\n    // Setup properties\r\n    // this.properties.textAreaValue = this.elements.targetTextArea.value;\r\n\r\n\r\n    // Add to DOM\r\n    this.elements.keyboardContainer.appendChild(this.elements.keysContainer);\r\n    document.body.appendChild(this.elements.keyboardContainer);\r\n    this.elements.keysContainer.appendChild(createdKeys);\r\n\r\n    //Add keys in this\r\n    this.elements.keys = this.elements.keysContainer.querySelectorAll(\".keys-container_key\");\r\n    this.elements.specialKeys = this.elements.keysContainer.querySelectorAll(\".key_special\");\r\n    this.elements.notSpecialKeys = this.elements.keysContainer.querySelectorAll(\".key_not-special\");\r\n\r\n    //Add physical keyboard event for window\r\n  }\r\n\r\n  // isSpecialKey (keyElement) {\r\n  //   const keysData = this.data.keysDataArr; //--\r\n  //   const keyCode = keyElement.getAttribute(\"data-code\"); //--\r\n  //   const keyDataObj = keysData.find(dataObj => dataObj.code === keyCode); //--\r\n  //   const keyDataObj = getKeyDta(keyElement);\r\n  //   const isSpecialKey = keyDataObj.isSpecial;\r\n\r\n  //   return isSpecialKey;\r\n  // }\r\n\r\n  createKeys (keysDataArr, lineBreakArr) {\r\n    const fragment = document.createDocumentFragment();\r\n\r\n    keysDataArr.forEach(keyObj => {\r\n      const keyElement = document.createElement(\"button\");\r\n      const insertLineBreak = lineBreakArr.indexOf(keyObj.code) !== -1;\r\n      const isSpecialKey = keyObj.isSpecial;\r\n      \r\n      // Add attributes/classes\r\n      keyElement.setAttribute(\"data-code\", keyObj.code);\r\n      keyElement.classList.add(\"keyboard__key\", \"key\", `key_${keyObj.size}`);\r\n\r\n      isSpecialKey\r\n        ? keyElement.classList.add(\"key_special\")\r\n        : keyElement.classList.add(\"key_not-special\")\r\n      \r\n      // Add texContent \r\n      this.setTextContentForKey(keyElement);\r\n      // Add Listener \r\n      this.setListenerForKey(keyElement);\r\n\r\n      //Add to DOM\r\n      fragment.appendChild(keyElement);\r\n\r\n      if (insertLineBreak) {\r\n          const lineBreakElement = document.createElement(\"div\");\r\n          lineBreakElement.classList.add(\"line-break-item\");\r\n          fragment.appendChild(lineBreakElement);\r\n      }\r\n    });\r\n\r\n    return fragment;\r\n  }\r\n\r\n  setTextContentForKey (keyElement) {\r\n    const keyData = this.getKeyData(keyElement);\r\n    const lang = this.properties.language;\r\n    const isCapsLock = this.properties.capsLock;\r\n    const isShift = this.properties.shift;\r\n\r\n    let result = \"\";\r\n\r\n    if (isCapsLock && isShift) {\r\n      result = keyData[lang + \"ShiftKey\"].toLowerCase();\r\n    } else if (isCapsLock) {\r\n      result = keyData[lang + \"Key\"].toUpperCase();\r\n    } else if (isShift) {\r\n      result = keyData[lang + \"ShiftKey\"];\r\n    } else {\r\n      result = keyData[lang + \"Key\"];\r\n    }\r\n\r\n    keyElement.textContent = result;\r\n\r\n    // switch (language) {\r\n\r\n    //   case \"ru\":\r\n    //     if (isCapsLock && isShift) {\r\n    //       result = keyData.ruShiftKey.toLowerCase();\r\n    //     } else if (isCapsLock) {\r\n    //       result = keyData.ruKey.toUpperCase();\r\n    //     } else if (isShift) {\r\n    //       result = keyData.ruShiftKey;\r\n    //     } else {\r\n    //       result = keyData.ruKey;\r\n    //     }\r\n    //     break;\r\n\r\n    //     case \"eng\":\r\n    //       if (isCapsLock && isShift) {\r\n    //         result = keyData.engShiftKey.toLowerCase();\r\n    //       } else if (isCapsLock) {\r\n    //         result = keyData.engKey.toUpperCase();\r\n    //       } else if (isShift) {\r\n    //         result = keyData.engShiftKey;\r\n    //       } else {\r\n    //         result = keyData.engKey;\r\n    //       }\r\n    //       break;\r\n    // }\r\n  }\r\n\r\n  setListenerForKey (keyElement) { \r\n    const keyData = this.getKeyData(keyElement);\r\n    if (keyData.isSpecial) {\r\n      switch(keyData.code) {\r\n\r\n        case \"Backspace\":\r\n          keyElement.addEventListener(\"click\", this.eventHandlers.onBackspaceHandler);\r\n        break;\r\n\r\n        case \"Tab\":\r\n          keyElement.addEventListener(\"click\", this.eventHandlers.onTabHandler);\r\n        break;\r\n\r\n        case \"CapsLock\":\r\n          keyElement.addEventListener(\"click\", this.eventHandlers.onCapsLockHandler);\r\n        break;\r\n\r\n        case \"Enter\":\r\n          keyElement.addEventListener(\"click\", this.eventHandlers.onEnterHandler);\r\n        break;\r\n\r\n        case \"ShiftLeft\":\r\n        case \"ShiftRight\":\r\n          keyElement.addEventListener(\"dblclick\", this.eventHandlers.onShiftHandler);\r\n        break;\r\n\r\n        case \"ControlLeft\":\r\n        case \"ControlRight\":\r\n          keyElement.addEventListener(\"dblclick\", this.eventHandlers.onControlHandler);\r\n        break;\r\n\r\n        case \"MetaLeft\":\r\n          keyElement.addEventListener(\"dblclick\", this.eventHandlers.onMetaLeftHandler);\r\n        break;\r\n\r\n        case \"AltLeft\":\r\n        case \"AltRight\":\r\n          keyElement.addEventListener(\"dblclick\", this.eventHandlers.onAltHandler);\r\n        break;\r\n      }\r\n    } else {\r\n      keyElement.addEventListener(\"click\", this.eventHandlers.onClickTextInputHandler);\r\n    }\r\n\r\n    // Default listener for any key\r\n    keyElement.addEventListener(\"mousedown\", this.eventHandlers.onMousedownHandler)\r\n  }\r\n\r\n  getKeyData (keyElement) {\r\n    const keyCode = keyElement.getAttribute(\"data-code\");\r\n    if (!keyCode) return null;\r\n\r\n    const keyData = this.data.keysDataArr.find(keyObj => keyObj.code === keyCode);\r\n\r\n    return keyData;\r\n  }\r\n\r\n  onBackspaceListener() {\r\n    this.elements.targetTextArea.value = this.elements.targetTextArea.value.slice(0, -1);\r\n    // this.elements.targetTextArea.value = this.elements.targetTextArea.value + \"12345\";\r\n    // console.log(this.elements.targetTextArea.value);\r\n  }\r\n\r\n  onTabListener () {\r\n    this.elements.targetTextArea.value += \"\\t\";\r\n    // console.log(this.elements.targetTextArea.value);\r\n  }\r\n\r\n  onCapsLockListener (event) {\r\n    this.properties.capsLock = !this.properties.capsLock;\r\n    this.elements.notSpecialKeys.forEach(this.functions.setTextContentForKey);\r\n\r\n    this.properties.capsLock \r\n      ? event.currentTarget.classList.add(\"active-lock\") \r\n      : event.currentTarget.classList.remove(\"active-lock\");\r\n  }\r\n\r\n  onEnterListener () {\r\n    this.elements.targetTextArea.value += \"\\n\";\r\n    // console.log(this.elements.targetTextArea.value);\r\n  }\r\n\r\n  onShiftListener (event) {\r\n    this.properties.shift = !this.properties.shift;\r\n    this.elements.notSpecialKeys.forEach(this.functions.setTextContentForKey);\r\n\r\n    const shiftKeys = this.elements.keysContainer.querySelectorAll(\".key[data-code=ShiftLeft], .key[data-code=ShiftRight]\");\r\n\r\n    this.properties.shift \r\n      ? event.currentTarget.classList.add(\"active-lock\") \r\n      : shiftKeys.forEach(el => el.classList.remove(\"active-lock\"));\r\n  }\r\n\r\n  onControlListener (event) {\r\n    this.properties.ctrl = !this.properties.ctrl;\r\n    // this.elements.notSpecialKeys.forEach(this.functions.setTextContentForKey);\r\n\r\n    const ctrlKeys = this.elements.keysContainer.querySelectorAll(\".key[data-code=ControlLeft], .key[data-code=ControlRight]\");\r\n\r\n    this.properties.ctrl \r\n      ? event.currentTarget.classList.add(\"active-lock\") \r\n      : ctrlKeys.forEach(el => el.classList.remove(\"active-lock\"));\r\n  }\r\n\r\n  onMetaLeftListener (event) {\r\n    event.currentTarget.classList.toggle(\"active-lock\");\r\n  }\r\n\r\n  onAltListener (event) {\r\n    this.properties.alt = !this.properties.alt;\r\n    // this.elements.notSpecialKeys.forEach(this.functions.setTextContentForKey);\r\n\r\n    const altKeys = this.elements.keysContainer.querySelectorAll(\".key[data-code=AltLeft], .key[data-code=AltRight]\");\r\n\r\n    this.properties.alt \r\n      ? event.currentTarget.classList.add(\"active-lock\") \r\n      : altKeys.forEach(el => el.classList.remove(\"active-lock\"));\r\n  }\r\n\r\n  onClickTextInputListener (event) {\r\n    this.elements.targetTextArea.value += event.currentTarget.textContent;\r\n  }\r\n\r\n  onMousedownListener(event) {\r\n    const currentTargetEl = event.currentTarget;\r\n    currentTargetEl.classList.add(\"active\");\r\n\r\n    currentTargetEl.addEventListener(\"mouseover\", toggleActiveClass);\r\n    currentTargetEl.addEventListener(\"mouseout\", toggleActiveClass);\r\n\r\n    this.elements.keyboardContainer.addEventListener(\"mouseup\", () => {\r\n      currentTargetEl.classList.remove(\"active\");\r\n      currentTargetEl.removeEventListener(\"mouseover\", toggleActiveClass);\r\n      currentTargetEl.removeEventListener(\"mouseout\", toggleActiveClass);\r\n    }, {once: true});\r\n\r\n    function toggleActiveClass (e) {\r\n      e.currentTarget.classList.toggle(\"active\");\r\n    }\r\n  }\r\n\r\n}\r\n\r\nclass TextArea {\r\n\r\n  rows = null;\r\n  cols = null;\r\n  id = null;\r\n  // value = \"\";\r\n\r\n\r\n  constructor (textareaId, rows, cols) {\r\n    this.id = textareaId;\r\n    this.rows = rows;\r\n    this.cols = cols;\r\n\r\n    const textAreaElement = document.createElement(\"textarea\");\r\n    textAreaElement.setAttribute(\"rows\", `${rows}`);\r\n    textAreaElement.setAttribute(\"cols\", `${cols}`);\r\n    textAreaElement.id = textareaId;\r\n    textAreaElement.classList.add(\"textarea\");\r\n\r\n    textAreaElement.addEventListener(\"input\", () => {\r\n      this.value = textAreaElement.value;\r\n      console.log(textAreaElement.value);\r\n    })\r\n\r\n    document.body.appendChild(textAreaElement);\r\n  }\r\n\r\n}\r\n\r\nconst textArea = new TextArea(\"textarea\", 5, 50);\r\n\r\nconst RssKeyboard = new Keyboard(\"keyboard\", \"textarea\", keysData, lineBreakLayout);\r\n\r\n\r\n// alert(\"делаю прямо сейчас. осталось повесить обработчики сибытий. если не сложно, проверьте завтра-послезавтра\");"],"names":["rows","cols","id","constructor","textareaId","this","textAreaElement","document","createElement","setAttribute","classList","add","addEventListener","value","console","log","body","appendChild","elements","keyboardContainer","keysContainer","keys","specialKeys","notSpecialKeys","targetTextArea","eventHandlers","onBackspaceHandler","onBackspaceListener","bind","onTabHandler","onTabListener","onCapsLockHandler","onCapsLockListener","onEnterHandler","onEnterListener","onShiftHandler","onShiftListener","onControlHandler","onControlListener","onMetaLeftHandler","onMetaLeftListener","onAltHandler","onAltListener","onClickTextInputHandler","onClickTextInputListener","onMousedownHandler","onMousedownListener","functions","setTextContentForKey","properties","language","capsLock","shift","ctrl","alt","data","keysDataArr","lineBreakArr","containerId","keysData","lineBreakKeyCodes","createdKeys","createKeys","getElementById","querySelectorAll","fragment","createDocumentFragment","forEach","keyObj","keyElement","insertLineBreak","indexOf","code","isSpecialKey","isSpecial","size","setListenerForKey","lineBreakElement","keyData","getKeyData","lang","isCapsLock","isShift","result","toLowerCase","toUpperCase","textContent","keyCode","getAttribute","find","slice","event","currentTarget","remove","shiftKeys","el","ctrlKeys","toggle","altKeys","currentTargetEl","toggleActiveClass","e","removeEventListener","once"],"sourceRoot":""}