{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./src/index.js"],"sourcesContent":["import \"./style.scss\";\nimport keysData from \"./keysData.json\";\n\n// function startCreateArr() {\n//   let input = document.querySelector(\"#kinput\");\n  \n//   input.onkeydown = handle;\n\n//   console.log(EngKeysData);\n// }\n\n// function handle (e) {\n//   e.preventDefault();\n//   if (e.repeat) return;\n//   let data = {\n//     code: e.code,\n//     ruShiftKey: e.key,\n//     size: \"s\",\n//     Shift: e.shiftKey,\n//     ctrlKey: e.ctrlKey,\n//     altKey: e.altKey\n//   }\n\n//   RuKeysData.push(data);\n//   console.log(RuKeysData);\n// }\n\n// window.addEventListener(\"DOMContentLoaded\", startCreateArr);\n\n\nconst lineBreakLayout = [\"Backspace\", \"Backslash\", \"Enter\", \"ShiftRight\", \"ControlRight\"];\n\nclass Keyboard {\n\n  elements = {\n    keyboardContainer: null,\n    keysContainer: null,\n    keys: [],\n    targetTextArea: null,\n  };\n\n    eventHandlers = {\n        oninput: null,\n        onclose: null\n    };\n\n    properties = {\n        // textAreaValue: \"\",\n        language: \"ru\",\n        capsLock: false,\n        shift: false,\n        ctrl: false,\n        alt: false,\n    };\n\n    data = {\n      keysDataArr: [],\n      lineBreakArr: [],\n    }\n\n\n\n  constructor (containerId, textareaId, keysData, lineBreakKeyCodes) {\n    this.data.keysDataArr = keysData;\n    this.data.lineBreakArr = lineBreakKeyCodes;\n\n    //Create elements\n    this.elements.keyboardContainer = document.createElement(\"div\"); \n    this.elements.keysContainer = document.createElement(\"div\"); \n    const createdKeys = this.createKeys(this.data.keysDataArr, this.data.lineBreakArr);\n\n    // Setup main elements\n    this.elements.keyboardContainer.classList.add(\"keyboard\");\n    this.elements.keyboardContainer.id = containerId;\n    this.elements.keysContainer.classList.add(\"keyboard__keys\", \"keys-container\");\n    this.elements.targetTextArea = document.getElementById(textareaId);\n\n    // this.elements.keys = this.elements.keysContainer.querySelectorAll(\".keys-container_key\");\n\n    // Setup properties\n    // this.properties.textAreaValue = this.elements.targetTextArea.value;\n\n\n    // Add to DOM\n    this.elements.keyboardContainer.appendChild(this.elements.keysContainer);\n    document.body.appendChild(this.elements.keyboardContainer);\n    this.elements.keysContainer.appendChild(createdKeys);\n  }\n\n  createKeys (keysDataArr, lineBreakArr) {\n    const fragment = document.createDocumentFragment();\n\n    keysDataArr.forEach(keyObj => {\n      const keyElement = document.createElement(\"button\");\n      const insertLineBreak = lineBreakArr.indexOf(keyObj.code) !== -1;\n      \n      // Add attributes/classes\n      keyElement.setAttribute(\"data-code\", keyObj.code);\n      keyElement.classList.add(\"keyboard__key\", \"key\", `key_${keyObj.size}`);\n\n      this.setTextContentForKey(keyElement);\n      this.setListenerForKey(keyElement);\n\n      // if (insertLineBreak) {\n      //   keyElement.style.clear = \"right\";\n      // }\n\n      fragment.appendChild(keyElement);\n\n      if (insertLineBreak) {\n          // fragment.appendChild(document.createElement(\"br\"));\n          const lineBreakElement = document.createElement(\"div\");\n          lineBreakElement.classList.add(\"line-break-item\");\n          fragment.appendChild(lineBreakElement);\n      }\n    });\n\n    return fragment;\n  }\n\n  setTextContentForKey (keyElement) {\n    const keyData = this.getKeyData(keyElement);\n    const lang = this.properties.language;\n    const isCapsLock = this.properties.capsLock;\n    const isShift = this.properties.shift;\n\n    let result = \"\";\n\n    if (isCapsLock && isShift) {\n      result = keyData[lang + \"ShiftKey\"].toLowerCase();\n    } else if (isCapsLock) {\n      result = keyData[lang + \"Key\"].toUpperCase();\n    } else if (isShift) {\n      result = keyData[lang + \"ShiftKey\"];\n    } else {\n      result = keyData[lang + \"Key\"];\n    }\n\n    keyElement.textContent = result;\n\n    // switch (language) {\n\n    //   case \"ru\":\n    //     if (isCapsLock && isShift) {\n    //       result = keyData.ruShiftKey.toLowerCase();\n    //     } else if (isCapsLock) {\n    //       result = keyData.ruKey.toUpperCase();\n    //     } else if (isShift) {\n    //       result = keyData.ruShiftKey;\n    //     } else {\n    //       result = keyData.ruKey;\n    //     }\n    //     break;\n\n    //     case \"eng\":\n    //       if (isCapsLock && isShift) {\n    //         result = keyData.engShiftKey.toLowerCase();\n    //       } else if (isCapsLock) {\n    //         result = keyData.engKey.toUpperCase();\n    //       } else if (isShift) {\n    //         result = keyData.engShiftKey;\n    //       } else {\n    //         result = keyData.engKey;\n    //       }\n    //       break;\n    // }\n  }\n\n  setListenerForKey (keyElement) { \n    const keyData = this.getKeyData(keyElement);\n    if (keyData.special) {\n      switch(keyData.code) {\n\n        case \"Backspace\":\n          keyElement.addEventListener(\"click\", () => {\n            this.elements.targetTextArea.value = this.elements.targetTextArea.value.slice(0, -1);\n\n            this.elements.targetTextArea.value = this.elements.targetTextArea.value + \"12345\";\n          })\n      }\n    }\n\n  }\n\n  getKeyData (keyElement) {\n    const keyCode = keyElement.getAttribute(\"data-code\");\n    if (!keyCode) return null;\n\n    const keyData = this.data.keysDataArr.find(keyObj => keyObj.code === keyCode);\n\n    return keyData;\n  }\n}\n\nclass TextArea {\n\n  rows = null;\n  cols = null;\n  id = null;\n  // value = \"\";\n\n\n  constructor (textareaId, rows, cols) {\n    this.id = textareaId;\n    this.rows = rows;\n    this.cols = cols;\n\n    const textAreaElement = document.createElement(\"textarea\");\n    textAreaElement.setAttribute(\"rows\", `${rows}`);\n    textAreaElement.setAttribute(\"cols\", `${cols}`);\n    textAreaElement.id = textareaId;\n    textAreaElement.classList.add(\"textarea\");\n\n    textAreaElement.addEventListener(\"input\", () => {\n      // this.value = textAreaElement.value;\n      console.log(textAreaElement.value);\n    })\n\n    document.body.appendChild(textAreaElement);\n  }\n\n}\n\nconst textArea = new TextArea(\"textarea\", 5, 50);\n\nconst RssKeyboard = new Keyboard(\"keyboard\", \"textarea\", keysData, lineBreakLayout);\n\n\nalert(\"делаю прямо сейчас. осталось повесить обработчики сибытий. если не сложно, проверьте завтра-послезавтра\");"],"names":["rows","cols","id","constructor","textareaId","this","textAreaElement","document","createElement","setAttribute","classList","add","addEventListener","console","log","value","body","appendChild","elements","keyboardContainer","keysContainer","keys","targetTextArea","eventHandlers","oninput","onclose","properties","language","capsLock","shift","ctrl","alt","data","keysDataArr","lineBreakArr","containerId","keysData","lineBreakKeyCodes","createdKeys","createKeys","getElementById","fragment","createDocumentFragment","forEach","keyObj","keyElement","insertLineBreak","indexOf","code","size","setTextContentForKey","setListenerForKey","lineBreakElement","keyData","getKeyData","lang","isCapsLock","isShift","result","toLowerCase","toUpperCase","textContent","special","slice","keyCode","getAttribute","find","alert"],"sourceRoot":""}