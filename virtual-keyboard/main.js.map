{"version":3,"file":"main.js","mappings":"uqNAkLoB,IAlJpB,MAEEA,SAAW,CACTC,kBAAmB,KACnBC,cAAe,KACfC,KAAM,GACNC,eAAgB,MAGhBC,cAAgB,CACZC,QAAS,KACTC,QAAS,MAGbC,WAAa,CACTC,cAAe,GACfC,SAAU,KACVC,UAAU,EACVC,OAAO,EACPC,MAAM,EACNC,KAAK,GAGTC,KAAO,CACLC,YAAa,GACbC,aAAc,IAKlBC,YAAaC,EAAaC,EAAkBC,EAAUC,GACpDC,KAAKR,KAAKC,YAAcK,EACxBE,KAAKR,KAAKE,aAAeK,EAGzBC,KAAKvB,SAASC,kBAAoBuB,SAASC,cAAc,OACzDF,KAAKvB,SAASE,cAAgBsB,SAASC,cAAc,OACrD,MAAMC,EAAcH,KAAKI,WAAWJ,KAAKR,KAAKC,YAAaO,KAAKR,KAAKE,cAGrEM,KAAKvB,SAASC,kBAAkB2B,UAAUC,IAAI,YAC9CN,KAAKvB,SAASC,kBAAkB6B,GAAKX,EACrCI,KAAKvB,SAASE,cAAc0B,UAAUC,IAAI,iBAAkB,kBAC5DN,KAAKvB,SAASI,eAAiBoB,SAASO,cAAcX,GAKtDG,KAAKvB,SAASC,kBAAkB+B,YAAYT,KAAKvB,SAASE,eAC1DsB,SAASS,KAAKD,YAAYT,KAAKvB,SAASC,mBACxCsB,KAAKvB,SAASE,cAAc8B,YAAYN,GAG1CC,WAAYX,EAAaC,GACvB,MAAMiB,EAAWV,SAASW,yBAwB1B,OAtBAnB,EAAYoB,SAAQC,IAClB,MAAMC,EAAad,SAASC,cAAc,UACpCc,GAAyD,IAAvCtB,EAAauB,QAAQH,EAAOI,MAGpDH,EAAWI,aAAa,YAAaL,EAAOI,MAC5CH,EAAWV,UAAUC,IAAI,gBAAiB,MAAO,OAAOQ,EAAOM,QAE/DpB,KAAKqB,qBAAqBN,GAC1Bf,KAAKsB,kBAAkBP,GAMvBJ,EAASF,YAAYM,GAEjBC,GACAL,EAASF,YAAYR,SAASC,cAAc,UAI3CS,EAGTU,qBAAsBN,GACpB,MAAMQ,EAAUvB,KAAKwB,WAAWT,GAC1BU,EAAOzB,KAAKf,WAAWE,SACvBuC,EAAa1B,KAAKf,WAAWG,SAC7BuC,EAAU3B,KAAKf,WAAWI,MAEhC,IAAIuC,EAAS,GAGXA,EADEF,GAAcC,EACPJ,EAAQE,EAAO,YAAYI,cAC3BH,EACAH,EAAQE,EAAO,OAAOK,cACtBH,EACAJ,EAAQE,EAAO,YAEfF,EAAQE,EAAO,OAG1BV,EAAWgB,YAAcH,EA8B3BN,kBAAmBP,GACDf,KAAKwB,WAAWT,GAKlCS,WAAYT,GACV,MAAMiB,EAAUjB,EAAWkB,aAAa,aACxC,OAAKD,EAEWhC,KAAKR,KAAKC,YAAYyC,MAAKpB,GAAUA,EAAOI,OAASc,IAFhD,OASQ,WAAY,YAAa,EApJlC,CAAC,YAAa,YAAa,QAAS,UAAW,gB","sources":["webpack://my-webpack-project/./src/index.js"],"sourcesContent":["import \"./style.scss\";\nimport keysData from \"./keysData.json\";\n\n// function startCreateArr() {\n//   let input = document.querySelector(\"#kinput\");\n  \n//   input.onkeydown = handle;\n\n//   console.log(EngKeysData);\n// }\n\n// function handle (e) {\n//   e.preventDefault();\n//   if (e.repeat) return;\n//   let data = {\n//     code: e.code,\n//     ruShiftKey: e.key,\n//     size: \"s\",\n//     Shift: e.shiftKey,\n//     ctrlKey: e.ctrlKey,\n//     altKey: e.altKey\n//   }\n\n//   RuKeysData.push(data);\n//   console.log(RuKeysData);\n// }\n\n// window.addEventListener(\"DOMContentLoaded\", startCreateArr);\n\n\nconst lineBreakLayout = [\"Backspace\", \"Backslash\", \"Enter\", \"ArrowUp\", \"ArrowRight\"];\n\nclass Keyboard {\n\n  elements = {\n    keyboardContainer: null,\n    keysContainer: null,\n    keys: [],\n    targetTextArea: null,\n  };\n\n    eventHandlers = {\n        oninput: null,\n        onclose: null\n    };\n\n    properties = {\n        textAreaValue: \"\",\n        language: \"ru\",\n        capsLock: false,\n        shift: false,\n        ctrl: false,\n        alt: false,\n    };\n\n    data = {\n      keysDataArr: [],\n      lineBreakArr: [],\n    }\n\n\n\n  constructor (containerId, textareaSelector, keysData, lineBreakKeyCodes) {\n    this.data.keysDataArr = keysData;\n    this.data.lineBreakArr = lineBreakKeyCodes;\n\n    //Create elements\n    this.elements.keyboardContainer = document.createElement(\"div\"); \n    this.elements.keysContainer = document.createElement(\"div\"); \n    const createdKeys = this.createKeys(this.data.keysDataArr, this.data.lineBreakArr);\n\n    // Setup main elements\n    this.elements.keyboardContainer.classList.add(\"keyboard\");\n    this.elements.keyboardContainer.id = containerId;\n    this.elements.keysContainer.classList.add(\"keyboard__keys\", \"keys-container\");\n    this.elements.targetTextArea = document.querySelector(textareaSelector);\n\n    // this.elements.keys = this.elements.keysContainer.querySelectorAll(\".keys-container_key\");\n\n    // Add to DOM\n    this.elements.keyboardContainer.appendChild(this.elements.keysContainer);\n    document.body.appendChild(this.elements.keyboardContainer);\n    this.elements.keysContainer.appendChild(createdKeys);\n  }\n\n  createKeys (keysDataArr, lineBreakArr) {\n    const fragment = document.createDocumentFragment();\n\n    keysDataArr.forEach(keyObj => {\n      const keyElement = document.createElement(\"button\");\n      const insertLineBreak = lineBreakArr.indexOf(keyObj.code) !== -1;\n      \n      // Add attributes/classes\n      keyElement.setAttribute(\"data-code\", keyObj.code);\n      keyElement.classList.add(\"keyboard__key\", \"key\", `key_${keyObj.size}`);\n\n      this.setTextContentForKey(keyElement);\n      this.setListenerForKey(keyElement);\n\n      // if (insertLineBreak) {\n      //   keyElement.style.clear = \"right\";\n      // }\n\n      fragment.appendChild(keyElement);\n\n      if (insertLineBreak) {\n          fragment.appendChild(document.createElement(\"br\"));\n      }\n    });\n\n    return fragment;\n  }\n\n  setTextContentForKey (keyElement) {\n    const keyData = this.getKeyData(keyElement);\n    const lang = this.properties.language;\n    const isCapsLock = this.properties.capsLock;\n    const isShift = this.properties.shift;\n\n    let result = \"\";\n\n    if (isCapsLock && isShift) {\n      result = keyData[lang + \"ShiftKey\"].toLowerCase();\n    } else if (isCapsLock) {\n      result = keyData[lang + \"Key\"].toUpperCase();\n    } else if (isShift) {\n      result = keyData[lang + \"ShiftKey\"];\n    } else {\n      result = keyData[lang + \"Key\"];\n    }\n\n    keyElement.textContent = result;\n\n    // switch (language) {\n\n    //   case \"ru\":\n    //     if (isCapsLock && isShift) {\n    //       result = keyData.ruShiftKey.toLowerCase();\n    //     } else if (isCapsLock) {\n    //       result = keyData.ruKey.toUpperCase();\n    //     } else if (isShift) {\n    //       result = keyData.ruShiftKey;\n    //     } else {\n    //       result = keyData.ruKey;\n    //     }\n    //     break;\n\n    //     case \"eng\":\n    //       if (isCapsLock && isShift) {\n    //         result = keyData.engShiftKey.toLowerCase();\n    //       } else if (isCapsLock) {\n    //         result = keyData.engKey.toUpperCase();\n    //       } else if (isShift) {\n    //         result = keyData.engShiftKey;\n    //       } else {\n    //         result = keyData.engKey;\n    //       }\n    //       break;\n    // }\n  }\n\n  setListenerForKey (keyElement) { \n    const keyData = this.getKeyData(keyElement);\n\n    return;\n  }\n\n  getKeyData (keyElement) {\n    const keyCode = keyElement.getAttribute(\"data-code\");\n    if (!keyCode) return null;\n\n    const keyData = this.data.keysDataArr.find(keyObj => keyObj.code === keyCode);\n\n    return keyData;\n  }\n}\n\n\nconst RssKeyboard = new Keyboard(\"keyboard\", \"#textarea\", keysData, lineBreakLayout);"],"names":["elements","keyboardContainer","keysContainer","keys","targetTextArea","eventHandlers","oninput","onclose","properties","textAreaValue","language","capsLock","shift","ctrl","alt","data","keysDataArr","lineBreakArr","constructor","containerId","textareaSelector","keysData","lineBreakKeyCodes","this","document","createElement","createdKeys","createKeys","classList","add","id","querySelector","appendChild","body","fragment","createDocumentFragment","forEach","keyObj","keyElement","insertLineBreak","indexOf","code","setAttribute","size","setTextContentForKey","setListenerForKey","keyData","getKeyData","lang","isCapsLock","isShift","result","toLowerCase","toUpperCase","textContent","keyCode","getAttribute","find"],"sourceRoot":""}